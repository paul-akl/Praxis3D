/*
	Luminance histogram shader, compute (luminanceHistogram.comp)
	Calculates the luminance histogram of the scene by converting color to luminance and incrementing the corresponding bin in the histogram buffer.
*/
#version 460

#define GROUP_SIZE 256
#define THREADS_X 16
#define THREADS_Y 16
#define THREADS_Z 1
#define EPSILON 0.000001

layout(rgba16f) readonly uniform highp image2D inputColorMap;
layout(std430, binding = 1) buffer histogramBuffer
{
	uint histogram[256];
};

uniform ivec2 screenSize;
uniform float minLogLuminance;
uniform float inverseLogLuminanceRange;

// Shared histogram buffer used for storing intermediate sums for each work group
shared uint histogramShared[GROUP_SIZE];

float calcLuminance(vec3 p_color)
{
	// Taken from RTR vol 4 pg. 278
	return dot(p_color, vec3(0.2125, 0.7154, 0.0721));
    //return dot(color, vec3(0.2126, 0.7152, 0.0722));
}

// For a given color and luminance range, return the histogram bin index
uint colorToBin(vec3 p_color, float p_minLogLuminance, float p_inverseLogLuminanceRange) 
{
	// Convert our RGB value to Luminance, see note for RGB_TO_LUM macro above
	float luminance = calcLuminance(p_color);

	// Avoid taking the log of zero
	if (luminance < EPSILON) 
	{
		return 0;
	}
	
	// Calculate the log_2 luminance and express it as a value in [0.0, 1.0]
	// where 0.0 represents the minimum luminance, and 1.0 represents the max.
	float logLuminance = clamp((log2(luminance) - p_minLogLuminance) * p_inverseLogLuminanceRange, 0.0, 1.0);

	// Map [0, 1] to [1, 255]. The zeroth bin is handled by the epsilon check above.
	return uint(logLuminance * 254.0 + 1.0);
}

layout (local_size_x = THREADS_X, local_size_y = THREADS_Y, local_size_z = THREADS_Z) in;
void main() 
{
    ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);
		
	// Initialize the bin for this thread to 0
	histogramShared[gl_LocalInvocationIndex] = 0;
	barrier();

	// Ignore threads that map to areas beyond the bounds of our HDR image
	if (gl_GlobalInvocationID.x < screenSize.x && gl_GlobalInvocationID.y < screenSize.y)
	{
		vec3 hdrColor = imageLoad(inputColorMap, ivec2(texCoord)).xyz;
		uint binIndex = colorToBin(hdrColor, minLogLuminance, inverseLogLuminanceRange);
		// We use an atomic add to ensure we don't write to the same bin in our
		// histogram from two different threads at the same time.
		atomicAdd(histogramShared[binIndex], 1);
	}

	// Wait for all threads in the work group to reach this point before adding our
	// local histogram to the global one
	barrier();

	// Technically there's no chance that two threads write to the same bin here,
	// but different work groups might! So we still need the atomic add.
	atomicAdd(histogram[gl_LocalInvocationIndex], histogramShared[gl_LocalInvocationIndex]);
}