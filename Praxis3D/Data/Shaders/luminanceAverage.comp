#version 460

#define GROUP_SIZE 256
#define THREADS_X 256
#define THREADS_Y 1
#define THREADS_Z 1

layout(binding = 0, r16f) uniform image2D averageLuminanceTexture;
layout(binding = 1, std430) buffer histogramBuffer
{
	uint histogram[256];
};

uniform float deltaTimeS;
uniform float minLogLuminance;
uniform float logLuminanceRange;
uniform uint screenNumOfPixels;

// Shared
shared uint histogramShared[GROUP_SIZE];

layout (local_size_x = THREADS_X, local_size_y = THREADS_Y, local_size_z = THREADS_Z) in;
void main() 
{
	// Get the count from the histogram buffer
	uint countForThisBin = histogram[gl_LocalInvocationIndex];
	histogramShared[gl_LocalInvocationIndex] = countForThisBin * gl_LocalInvocationIndex;

	barrier();

	// Reset the count stored in the buffer in anticipation of the next pass
	histogram[gl_LocalInvocationIndex] = 0;

	// This loop will perform a weighted count of the luminance range
	for (uint cutoff = (GROUP_SIZE >> 1); cutoff > 0; cutoff >>= 1) 
	{
		if (uint(gl_LocalInvocationIndex) < cutoff) 
		{
			histogramShared[gl_LocalInvocationIndex] += histogramShared[gl_LocalInvocationIndex + cutoff];
		}

		barrier();
	}
	
	// We only need to calculate this once, so only a single thread is needed.
	if(gl_LocalInvocationIndex == 0) 
	{
		// Here we take our weighted sum and divide it by the number of pixels
		// that had luminance greater than zero (since the index == 0, we can
		// use countForThisBin to find the number of black pixels)
		float weightedLogAverage = (histogramShared[0] / max(screenNumOfPixels - float(countForThisBin), 1.0)) - 1.0;

		// Map from our histogram space to actual luminance
		float weightedAvgLum = exp2(((weightedLogAverage / 254.0) * logLuminanceRange) + minLogLuminance);

		float time = clamp(deltaTimeS * 1, 0.1, 1.0);//clamp(1.0 - exp(deltaTimeS * 1.1), 0.1, 1.0);

		// The new stored value will be interpolated using the last frames value
		// to prevent sudden shifts in the exposure.
		float lumLastFrame = imageLoad(averageLuminanceTexture, ivec2(0, 0)).x;
		float adaptedLum = lumLastFrame + (weightedAvgLum - lumLastFrame) * time;
		imageStore(averageLuminanceTexture, ivec2(0, 0), vec4(adaptedLum, 0.0, 0.0, 0.0));
	}
}